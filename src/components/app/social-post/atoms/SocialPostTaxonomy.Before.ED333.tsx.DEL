import React, { useRef, useState } from 'react';
import { useForm } from 'react-hook-form';
import { useDebounceEffect, useRequest, useSafeState } from 'ahooks';

import { Card, Form, Popover, Skeleton, Space } from 'antd';

import { DeleteOutlined, EditOutlined, SendOutlined } from '@ant-design/icons';
import CommentTaxonomy from '@components/app/social-post/atoms/CommentTaxonomy';
import IthriveButton from '@components/shared/educare-button';
import EducareConfirmDelete from '@components/shared/educare-confirm-delete';
import EducareImage from '@components/shared/educare-image';
import EducareInput from '@components/shared/educare-input';
import type { TEducareShareDetail } from '@components/shared/educare-share';
import EducareShareModal from '@components/shared/educare-share';
import { zodResolver } from '@hookform/resolvers/zod';
import RequestApi from '@library/apis/request.api';
import { gradients } from '@library/const';
import { PermissionActionsEnum, PermissionModulesEnum, SocketEnum } from '@library/enums';
import { funcFormatDateAgo } from '@library/functions';
import type { TCommentSchema } from '@library/schemas/comment';
import { CommentSchema } from '@library/schemas/comment';
import type { TBasicUserInfo } from '@library/schemas/login';
import { useSocket } from '@library/sockethook';
import type { TImageEntity } from '@library/types';
import type { Gradient } from '@library/types/shared';
import { useHasPermission } from '@library/utils/permissionUtils';
import { BsThreeDotsVertical } from '@react-icons/all-files/bs/BsThreeDotsVertical';
import { FaRegComment } from '@react-icons/all-files/fa/FaRegComment';
import { FaComment } from '@react-icons/all-files/fa6/FaComment';
import { MdOutlineStar } from '@react-icons/all-files/md/MdOutlineStar';
import { MdOutlineStarBorder } from '@react-icons/all-files/md/MdOutlineStarBorder';
import { TbShare3 } from '@react-icons/all-files/tb/TbShare3';

type SocialPostTaxonomyEditableProps =
    | {
          editable: true;
          onEdit: () => void;
      }
    | {
          editable: false;
      };
type SocialPostTaxonomyDeletableProps =
    | {
          deletable: true;
          onDelete: () => void;
      }
    | {
          deletable: false;
      };
type SocialPostTaxonomyActionableProps =
    | {
          noAction: false;
          likes: number;
          comments: number;
          shares: number;
      }
    | {
          noAction: true;
      };

type SocialPostTaxonomyProps = {
    id: string;
    user: TBasicUserInfo;
    updatedAt: string | Date;
    text: string;
    gradient?: Gradient;
    comments?: number;
    setGradient?: (gradient: Gradient) => void;
    images: TImageEntity[];
} & SocialPostTaxonomyEditableProps &
    SocialPostTaxonomyDeletableProps &
    SocialPostTaxonomyActionableProps;

const OneImage = ({ image }: { image: TImageEntity }) => {
    return (
        <div className="grid justify-center gap-2">
            {/*<EducareImage className="!rounded-md !mix-blend-difference" image={image} width="100%" height={400} />*/}
            <EducareImage className="!rounded-md" image={image} width="100%" height={500} />
        </div>
    );
};
const TwoImages = ({ images }: { images: TImageEntity[] }) => {
    return (
        <div className="grid sm:grid-cols-2 justify-center gap-2">
            {images.map((image, index) => (
                <EducareImage key={index} className="!rounded-md" image={image} width="100%" height={450} />
            ))}
        </div>
    );
};
const ThreeImages = ({ images }: { images: TImageEntity[] }) => {
    return (
        <div className="grid sm:grid-cols-3 justify-center gap-2">
            {images.map((image, index) => (
                <EducareImage key={index} className="!rounded-md" image={image} width="100%" height={400} />
            ))}
        </div>
    );
};
const FourImages = ({ images }: { images: TImageEntity[] }) => {
    return (
        <div className="grid sm:grid-cols-2 justify-center gap-2">
            {images.map((image, index) => (
                <EducareImage key={index} className="!rounded-md" image={image} width="100%" height={400} />
            ))}
        </div>
    );
};
const RestImages = ({ images }: { images: TImageEntity[] }) => {
    return (
        <div className="flex flex-wrap justify-center gap-2">
            {images.map((image, index) => (
                <EducareImage key={index} className="!rounded-md" image={image} width="100%" height={300} />
            ))}
        </div>
    );
};

const SocialPostTaxonomy = (props: SocialPostTaxonomyProps) => {
    /* static variables */
    const maxCommentToShowByDefault = 5;
    const maxCommentTaxonomyHeight = 500;

    /* /static variables end*/

    const { id, text, updatedAt, user, images, noAction, setGradient, gradient } = props;
    const socket = useSocket(String(process.env.NEXT_PUBLIC_SOCKET_URL), '/notification');

    const [shareState, setShareState] = useSafeState<TEducareShareDetail | null>(null);
    const [commentOpen, setCommentOpen] = useSafeState<boolean>(false);
    const [comments, setComments] = useSafeState<any[]>([]);
    const [localState, setLocalState] = useSafeState<boolean>(false);
    const [commentCount, setCommentCount] = useSafeState(props.comments || 0);
    const [likes, setLikes] = useSafeState(noAction ? 0 : props.likes || 0);
    const [isLoadMoreCommentActive, setIsLoadMoreCommentActive] = useSafeState<boolean>(false);
    const [commentTaxonomyHeight, _scth] = useSafeState<number>(0);
    const setCommentTaxonomyHeight = (height: number) => _scth(Math.min(height, maxCommentTaxonomyHeight));

    // const commentTaxonomyRef = useRef<HTMLDivElement>(null);//no need

    const hookForm = useForm<TCommentSchema>({
        mode: 'onChange',
        resolver: zodResolver(CommentSchema),
        defaultValues: {
            id: self.crypto.randomUUID(),
            parentCommentId: '',
            comment: '',
        },
    });

    const canEdit = useHasPermission(PermissionModulesEnum.SOCIAL_POST, PermissionActionsEnum.UPDATE);
    const canDelete = useHasPermission(PermissionModulesEnum.SOCIAL_POST, PermissionActionsEnum.DELETE);

    const { run: onComment, loading: onCommentLoading } = useRequest(RequestApi<TCommentSchema, any>, {
        manual: true,
        onSuccess: () => {
            setLocalState(true);
            commentRefresh();
            hookForm.reset();
            // setCommentCount(commentCount + 1);
        },
    });
    const onSubmit = async (payload: TCommentSchema) => {
        payload.id = self.crypto.randomUUID();
        onComment({
            module: 'social-post-activity',
            method: 'POST',
            url: `${id}/comment`,
            payload: payload,
        });
    };
    const handleButtonClick = (newGradient: Gradient) => {
        if (setGradient) {
            setLocalState(true);
            setGradient(newGradient);
        }
    };
    const {
        run: onIsUserReacted,
        loading: isUserReactedLoading,
        data: isUserReactedBefore,
    } = useRequest(RequestApi<null, { isUserReactedToPost: boolean }>, {
        manual: true,
    });
    useDebounceEffect(
        () => {
            if (id && !noAction) {
                onIsUserReacted({
                    method: 'GET',
                    module: 'social-post-activity',
                    url: `${id}/is-user-reacted-to-post`,
                });
            }
        },
        [id],
        {
            wait: 5,
        },
    );
    const {
        run: onReactSocialPost,
        loading: reactSocialPostLoading,
        data: isUserReacted,
    } = useRequest(RequestApi<null, { status: 'unReacted' | 'reacted' }>, {
        manual: true,
        onSuccess: res => {
            if (!noAction) {
                setLocalState(true);
                // setLikes(l => (res.payload?.status === 'unReacted' ? l - 1 : l + 1));
            }
        },
    });
    const { run: onShareSocialPost, loading: shareSocialPostLoading } = useRequest(RequestApi<null, { status: boolean }>, {
        manual: true,
    });

    const {
        run: onCommentSocialPost,
        loading: commentSocialPostLoading,
        data: commentData,
        refresh: commentRefresh,
    } = useRequest(RequestApi<null, any>, {
        manual: true,
    });
    // const allComments = commentData?.payload || [];

    React.useEffect(() => {
        if (commentOpen) {
            onCommentSocialPost({
                method: 'GET',
                module: 'social-post-activity',
                url: `${id}/comment`,
            });
        }
    }, [commentOpen, onCommentSocialPost, id]);

    React.useEffect(() => {
        if (commentData?.payload) {
            setComments(commentData?.payload);
        }
        // eslint-disable-next-line react-hooks/exhaustive-deps
    }, [commentData]);

    React.useEffect(() => {
        if (socket) {
            socket.on('connect_error', (err: any) => {});
            socket.on('connect', function () {});
            socket.on(`${SocketEnum.SOCIAL_POST_NOTIFICATION_COMMENT}-${id}`, function (res: Record<string, any>) {
                if (localState === false) {
                    setComments(prev => [res.data, ...prev]);
                }
                // console.log(res);
            });

            socket.on(`${SocketEnum.SOCIAL_POST_ENGAGEMENT_COUNTER}-${id}`, function (res: Record<string, any>) {
                if (localState === false) {
                    setLikes(res?.data?.reactionCount);
                    setCommentCount(res?.data?.commentCount);
                }
            });
            socket.on('disconnect', function () {});
        }
        // eslint-disable-next-line react-hooks/exhaustive-deps
    }, [socket]);
    return (
        <Card
            data-social-post-id={id}
            className="border border-gray-200"
            classNames={{
                body: '!py-0 !px-4 grid gap-y-4',
            }}>
            <div className="flex justify-between">
                <Space>
                    <EducareImage
                        variant="social-avatar"
                        alt={user?.name}
                        image={{ imagePath: user?.profilePic || '', blurHash: user?.profilePicBlurHash || '' }}
                    />
                    <div>
                        <div className="text-sm font-medium">{user.name}</div>
                        <div className="text-xs text-gray-500">{funcFormatDateAgo(updatedAt)}</div>
                    </div>
                </Space>
                {!!(props?.editable || props?.deletable) && (
                    <Popover
                        destroyTooltipOnHide
                        forceRender
                        trigger={['click']}
                        placement="leftTop"
                        zIndex={2}
                        content={
                            <div className="flex flex-col gap-2">
                                {props?.editable && (
                                    // <EduCarePermissionWrapper module={PermissionModulesEnum.SOCIAL_POST} permissions={PermissionActionsEnum.UPDATE}>
                                    <EducareButton
                                        type="text"
                                        size="small"
                                        className="!justify-start mr-5"
                                        icon={<EditOutlined />}
                                        onClick={props?.onEdit}>
                                        Edit
                                    </EducareButton>
                                )}
                                {props?.deletable && (
                                    <EducareConfirmDelete
                                        title="Delete Social Post"
                                        subtitle="Are you sure to delete this Social POST?"
                                        onDelete={props?.onDelete}>
                                        {/*<EduCarePermissionWrapper*/}
                                        {/*    module={PermissionModulesEnum.SOCIAL_POST}*/}
                                        {/*    permissions={PermissionActionsEnum.DELETE}>*/}
                                        <EducareButton type="text" size="small" className="text-red-500 !justify-start" icon={<DeleteOutlined />}>
                                            Delete
                                        </EducareButton>
                                        {/*</EduCarePermissionWrapper>*/}
                                    </EducareConfirmDelete>
                                )}
                            </div>
                        }>
                        <EducareButton type="text" icon={<BsThreeDotsVertical />} />
                        {/*{!canDelete && !canEdit ? <div></div> : <EducareButton type="text" icon={<BsThreeDotsVertical />} />}*/}
                    </Popover>
                )}
            </div>
            {images.length > 0 ? (
                <p className="text-sm">{text}</p>
            ) : (
                <>
                    <div
                        className="w-full rounded-md bg-red-500 py-4 md:py-10 min-h-96 flex justify-center items-center"
                        style={{ backgroundImage: `linear-gradient(to right, ${gradient?.colors[0]}, ${gradient?.colors[1]})` }}>
                        <div
                            className={`text-3xl text-center w-[85%]  sm:w-[70%] mx-auto font-bold ${gradient?.name === 'Gradient 10' ? 'text-gray-900' : 'text-white'}`}>
                            {text}
                        </div>
                    </div>
                    {id === 'preview' && (
                        <div>
                            <div className="text-base font-bold">Select status background</div>
                            <div className="mt-5 flex gap-4">
                                {gradients.map((gr: Gradient, index: number) => (
                                    <div
                                        key={index}
                                        className={`h-14 w-14 rounded-md cursor-pointer ${gr === gradient ? 'border-4 border-orange-500' : ''}`}
                                        style={{ backgroundImage: `linear-gradient(to right, ${gr.colors[0]}, ${gr.colors[1]})` }}
                                        onClick={() => handleButtonClick(gr)}></div>
                                ))}
                            </div>
                        </div>
                    )}
                </>
            )}

            {images.length === 1 && <OneImage image={images?.[0]} />}
            {images.length === 2 && <TwoImages images={images} />}
            {images.length === 3 && <ThreeImages images={images} />}
            {images.length === 4 && <FourImages images={images} />}
            {images.length >= 5 && (
                <>
                    <TwoImages images={images.slice(0, 2)} />
                    <ThreeImages images={images.slice(2, 5)} />
                    <RestImages images={images.slice(5)} />
                </>
            )}
            <EducareShareModal
                state={[shareState, setShareState]}
                onShare={() => {
                    onShareSocialPost({
                        method: 'PUT',
                        module: 'social-post-activity',
                        url: `${id}/share`,
                    });
                }}
            />
            {!noAction && (
                <>
                    <div className="flex items-center text-gray-500 text-sm gap-5">
                        <Space>
                            <EducareButton
                                size="small"
                                type="text"
                                className="text-red-500"
                                icon={
                                    (!isUserReacted?.payload?.status && isUserReactedBefore?.payload?.isUserReactedToPost) ||
                                    isUserReacted?.payload?.status === 'reacted' ? (
                                        <MdOutlineStar className="text-base" />
                                    ) : (
                                        <MdOutlineStarBorder className="text-base" />
                                    )
                                }
                                disabled={isUserReactedLoading}
                                loading={reactSocialPostLoading}
                                onClick={() => {
                                    onReactSocialPost({
                                        method: 'PUT',
                                        module: 'social-post-activity',
                                        url: `${id}/reaction`,
                                    });
                                }}>
                                <span>{likes}</span>
                            </EducareButton>
                        </Space>
                        <Space>
                            <EducareButton
                                size="small"
                                type="text"
                                className="text-blue-500"
                                icon={commentOpen ? <FaComment /> : <FaRegComment />}
                                // loading={commentSocialPostLoading}
                                onClick={() => {
                                    setCommentOpen(o => !o);
                                }}>
                                <span>{commentCount}</span>
                            </EducareButton>
                        </Space>
                        <Space>
                            <EducareButton
                                size="small"
                                type="text"
                                className="text-violet-500"
                                icon={<TbShare3 />}
                                loading={shareSocialPostLoading}
                                onClick={() => {
                                    setShareState({
                                        title: props.user?.name as string,
                                        description: props.text as string,
                                        shareUrl: `${window.location.href}/social-post/${id}`,
                                    });
                                }}>
                                <span>{props?.shares}</span>
                            </EducareButton>
                        </Space>
                    </div>
                    {commentOpen && (
                        <>
                            <div className="flex gap-5 mt-5">
                                <EducareImage variant="avatar" preview={false} image={{ imagePath: '', blurHash: '' }} />
                                <Form onFinish={hookForm.handleSubmit(onSubmit)} className="w-full">
                                    <div className="gap-2 w-full relative">
                                        <EducareInput
                                            type="text"
                                            hookForm={hookForm}
                                            name="comment"
                                            placeholder="Write a comment..."
                                            className="w-full rounded-xl"
                                        />
                                        <div className="flex justify-end absolute top-[30%] right-3 ">
                                            <EducareButton
                                                className="self-end rounded-lg border-none"
                                                size="small"
                                                htmlType="submit"
                                                variant="bordered"
                                                loading={onCommentLoading}>
                                                <SendOutlined className="text-[#FF8743] text-xl" />
                                            </EducareButton>
                                        </div>
                                    </div>
                                </Form>
                            </div>
                            <Skeleton avatar paragraph={{ rows: 3 }} loading={commentSocialPostLoading}>
                                {comments && Array.isArray(comments) && (
                                    <div
                                        className={` overflow-hidden ${commentTaxonomyHeight === 500 ? 'h-[500px] overflow-y-scroll' : ''}`}
                                        ref={ref => {
                                            // console.log(ref?.clientHeight, ref);
                                            setCommentTaxonomyHeight(ref?.clientHeight || 0);
                                        }}>
                                        {(isLoadMoreCommentActive ? comments : comments.slice(0, maxCommentToShowByDefault)).map((comment, index) => (
                                            <div key={index}>
                                                <CommentTaxonomy
                                                    commentCount={commentCount}
                                                    setComments={setComments}
                                                    setCommentCount={setCommentCount}
                                                    comment={comment}
                                                />
                                            </div>
                                        ))}
                                    </div>
                                )}
                            </Skeleton>
                        </>
                    )}
                </>
            )}
        </Card>
    );
};

export default SocialPostTaxonomy;
